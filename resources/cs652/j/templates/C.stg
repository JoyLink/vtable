CFile(f, classes, main) ::= <<
#include \<stdio.h>
#include \<stdlib.h>

typedef struct {
    char *name;
    int size;
    void (*(*_vtable)[])();
} metadata;

typedef struct {
    metadata *clazz;
} object;

object *alloc(metadata *clazz) {
    object *p = malloc(clazz->size);
    p->clazz = clazz;
    return p;
}


<classes>

<main>
>>


ClassDef(class, fields, methods) ::= <<


// D e f i n e  C l a s s  <class.name>
typedef struct {
    metadata *clazz;
    <fields:{field|<field>};separator ="\n">
} <class.name>;

<class.vtable:{vtables|#define <class.name>_<vtables.name>_SLOT <i0>};separator="\n">

<methods:{method|<method>};separator="\n">

void (*<class.name>_vtable[])() = {
    <class.vtable:{vtables|(void (*)())&<vtables.className>_<vtables.name>};separator=",\n">
};

metadata <class.name>_metadata = {"<class.name>", sizeof(<class.name>), &<class.name>_vtable};
>>

MethodDef(m,funcName,returnType,args,body) ::= <<
<returnType> <m.className>_<funcName>(<m.className> *this<args :{arg|, <arg>}>)
{
    <body: {bodys|<bodys>}>
}
>>

MainMethod(main,funcName,returnType,args,body) ::= <<
int main(int argc, char *argv[])
{
    <body: {bodys|<bodys>}>
}
>>

Block(block, locals, instrs) ::= <<
<locals: {local|<local>
}>
<instrs: {instr|<instr>};separator ="\n">
>>

VarDef(var, type)   ::= "<type> <var.name>;"

FuncName(f)         ::= "<f.name>"

ObjectTypeSpec(o)   ::= "<o.name> *"
PrimitiveTypeSpec(p)::= "<p.name>"

AssignStat(a,left,right) ::= "<left> = <right>"
PrintStringStat(p,args)  ::= <<
printf(<args: {arg|<arg>}; separator=", ">);
>>
PrintStat(p,args)   ::= <<
printf(<args: {arg|<arg>}; separator=", ">);
>>
CallStat(c,call)    ::= "<call>;"
CtorCall(ctor)      ::= " ((<ctor.name> *)alloc(&<ctor.name>_metadata))"
ReturnStat(r,expr)  ::= "return <expr>;"
WhileStat(w,condition, stat) ::= <<
while (<condition>)<stat>
>>
IfStat(i,condition, stat) ::= "if ( <condition> ) <stat>"
IfElseStat(i,condition, stat, elseStat) ::=<<
if(<condition>)<stat>
else <elseStat> >>

NullRef(n)          ::= "NULL"

LiteralRef(lit)     ::= "<lit.content>"
VarRef(v)           ::= "<v.name>"
FieldRef(f, object) ::= "<object>-><f.name>"
ThisRef(t)          ::= "this"
MethodCall(m, receiver, receiverType, fptrType, args) ::= <<
<fptrType>(*(<receiver>)->clazz->_vtable)[<receiverType>_<m.methodName>_SLOT])(((<m.className> *)<receiver>)<args:{arg|,<arg>}>)
>>

FuncPtrType(f, returnType, argTypes) ::= <<
(*(<returnType>(*)(<f.className> *<argTypes:{arg|,<arg>}>))
>>
TypeCast(cast,type, expr) ::= "((<type>)<expr>)"

ArgDef(a,type) ::="<type> <a.name>"
Blocks(b,blockList) ::=<<
{
    <blockList: {arg|<arg>}>
}>>

ElseStat(e,elseStat) ::="else <elseStat>"

VoidType(v) ::= "void"

ObjectArg(o,type) ::= "((<type>) <o.name>)"
